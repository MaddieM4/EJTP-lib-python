#!/usr/bin/env python
'''
This file is part of the Python EJTP library.

The Python EJTP library is free software: you can redistribute it 
and/or modify it under the terms of the GNU Lesser Public License as
published by the Free Software Foundation, either version 3 of the 
License, or (at your option) any later version.

the Python EJTP library is distributed in the hope that it will be 
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser Public License for more details.

You should have received a copy of the GNU Lesser Public License
along with the Python EJTP library.  If not, see 
<http://www.gnu.org/licenses/>.
'''

__doc__ = '''ejtp-identity

A simple little script for EJTP identity management from the command line.

Usage:
    ejtp-identity ( list ) [options]
    ejtp-identity ( details ) <name> [options]
    ejtp-identity ( new ) --name=<name> --location=<location> --encryptor=<encryptor>
    ejtp-identity ( merge ) <filename>
    ejtp-identity ( set ) <name> --args=<args> [options]
    ejtp-identity -h | --help
    ejtp-identity --version

Options:
    -h --help       Show this help message
    --cache-source=<cache-source>
'''

import os
import sys
import json

from ejtp.vendor.docopt import docopt

def list_identities(data):
    for identity in data.values():
        print('%s (%s)' % (identity['name'], identity['encryptor'][0]))

def identity_details(data, name):
    for identity in data.values():
        if identity['name'] == name:
            print(json.dumps(identity, indent=2))

def new_identity(name, location, encryptor, **kwargs):
    data = {
        'name': name,
        'location': location,
        'encryptor': encryptor
    }
    data.update(kwargs)
    print(json.dumps({json.dumps(data['location']): data}, indent=2))

def merge(filename, data_to_merge):
    with open(filename, 'r') as f:
        data = json.load(f)

    data.update(**data_to_merge)

    with open(filename, 'w') as f:
        json.dump(data, f)

def set_attribute(filename, name, **kwargs):
    with open(filename, 'r') as f:
        data = json.load(f)

    for identity in data.values():
        if identity['name'] == name:
            identity.update(**kwargs)

    with open(filename, 'w') as f:
        json.dump(data, f)


def main(argv):
    arguments = docopt(__doc__, argv=argv[1:],
        version='ejtp-identity 0.9.5')

    # TODO: environment var must not be here
    filename = arguments.get('--cache-source') or os.environ['EJTP_IDENTITY_CACHE_PATH']

    if arguments.get('list'):
        data = json.load(open(filename))
        list_identities(data)

    if arguments.get('details'):
        data = json.load(open(filename))
        identity_details(data, arguments['<name>'])

    if arguments.get('new'):
        name = arguments.get('--name')
        location = json.loads(arguments.get('--location'))
        encryptor = json.loads(arguments.get('--encryptor'))
        new_identity(name, location, encryptor)

    if arguments.get('merge'):
        filename = arguments.get('<filename>')
        data_to_merge = json.load(sys.stdin)
        merge(filename, data_to_merge)

    if arguments.get('set'):
        args = json.loads(arguments.get('--args')[0])
        set_attribute(filename, arguments.get('<name>'), **args)

if __name__ == '__main__':
    main(sys.argv)
