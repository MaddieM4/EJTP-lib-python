#!/usr/bin/env python
'''
This file is part of the Python EJTP library.

The Python EJTP library is free software: you can redistribute it 
and/or modify it under the terms of the GNU Lesser Public License as
published by the Free Software Foundation, either version 3 of the 
License, or (at your option) any later version.

the Python EJTP library is distributed in the hope that it will be 
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser Public License for more details.

You should have received a copy of the GNU Lesser Public License
along with the Python EJTP library.  If not, see 
<http://www.gnu.org/licenses/>.
'''

__doc__ = '''ejtp-identity

A simple little script for EJTP identity management from the command line.

Usage:
    ejtp-identity ( list )
    ejtp-identity ( details ) <name>
    ejtp-identity ( new ) --name=<name> --location=<location> --encryptor=<encryptor>
    ejtp-identity -h | --help
    ejtp-identity --version

Options:
    -h --help       Show this help message
'''

import sys
import json

from ejtp.vendor.docopt import docopt

def list_identities(data):
    for identity in data.values():
        print '%s (%s)' % (identity['name'], identity['encryptor'][0])

def identity_details(data, name):
    for identity in data.values():
        if identity['name'] == name:
            print json.dumps(identity, indent=2)

def new_identity(name, location, encryptor, **kwargs):
    data = {
        'name': name,
        'location': location,
        'encryptor': encryptor
    }
    data.update(kwargs)
    print json.dumps(data, indent=2)

def main(argv):
    arguments = docopt(__doc__, argv=argv[1:],
        version='ejtp-identity 0.9.5')

    data = json.load(open('../ejtp/tests/examplecache.json'))

    if arguments.get('list'):
        list_identities(data)

    if arguments.get('details'):
        identity_details(data, arguments['<name>'])

    if arguments.get('new'):
        name = arguments.get('--name')
        location = json.loads(arguments.get('--location'))
        encryptor = json.loads(arguments.get('--encryptor'))
        new_identity(name, location, encryptor)

if __name__ == '__main__':
    main(sys.argv)
