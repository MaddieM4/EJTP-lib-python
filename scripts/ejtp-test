#!/usr/bin/env python
'''
This file is part of the Python EJTP library.

The Python EJTP library is free software: you can redistribute it 
and/or modify it under the terms of the GNU Lesser Public License as
published by the Free Software Foundation, either version 3 of the 
License, or (at your option) any later version.

the Python EJTP library is distributed in the hope that it will be 
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser Public License for more details.

You should have received a copy of the GNU Lesser Public License
along with the Python EJTP library.  If not, see 
<http://www.gnu.org/licenses/>.
'''

__doc__ = '''ejtp-test

A suite of tools for testing your EJTP setup.

Usage:
    ejtp-test motd <interface> <remote> [ -e <encryptor_file> ]...
    ejtp-test -h | --help
    ejtp-test --version

Options:
    -e <filename>   File to use as an encryptor cache
    -h --help       Show this help message
'''

from ejtp.vendor.docopt import docopt
from ejtp.address import *

# TODO: Generalize this code in ejtp.logging
from ejtp.logging import verbose
from ejtp import logging
logger_parameters = list(logging.loudlogger)
logger_parameters[0] = 'ejtp-test'
logger = logging.makeLogger(*logger_parameters)

def get_encryptors(args):
    filenames = args['-e']
    if not filenames:
        return {}
    result = {}
    for name in filenames:
        result.update(get_encryptors_from_file(name))
    return result

def get_encryptors_from_file(filename):
    fileobj = None
    if filename == '-':
        import sys
        fileobj = sys.STDIN
    else:
        try:
            fileobj = open(filename)
        except Exception as e:
            logger.error(e)
            logger.info("Could not open encryptor file for reading (%r)", filename)
            return {}
    import json
    try:
        return json.load(fileobj)
    except:
        logger.error("Could not parse JSON in encryptor data")
        return {}

def test_motd(args):
    from ejtp.router import Router
    from ejtp.motd import MOTDClient

    cache  = get_encryptors(args)
    local  = py_address(args['<interface>'])
    remote = py_address(args['<remote>'])
    client = MOTDClient(Router(), local, encryptor_cache=cache)

    response = {}
    def get_response(msg, c):
        print "Received response from %r:\n" % msg.addr
        print msg.jsoncontent['content']
        response['received'] = True
    client.request(remote, get_response)
    print "Waiting for remote response..."
    while not response:
        import time
        time.sleep(0.2)

if __name__ == '__main__':
    arguments = docopt(__doc__, version='ejtp-test 0.9.1')
    if arguments['motd']:
        test_motd(arguments)
