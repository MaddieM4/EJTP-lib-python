#!/usr/bin/env python
'''
This file is part of the Python EJTP library.

The Python EJTP library is free software: you can redistribute it 
and/or modify it under the terms of the GNU Lesser Public License as
published by the Free Software Foundation, either version 3 of the 
License, or (at your option) any later version.

the Python EJTP library is distributed in the hope that it will be 
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser Public License for more details.

You should have received a copy of the GNU Lesser Public License
along with the Python EJTP library.  If not, see 
<http://www.gnu.org/licenses/>.
'''

__doc__ = '''ejtpd

This utility runs as a daemon, allowing a priveleged EJTP client to add
and remove client services from the process.

Usage:
    ejtpd start [-f <sourcefile>] [-i <interface>] [-C <controller>]
    ejtpd stop
    ejtpd client launch
    ejtpd client destroy
    ejtpd -h | --help
    ejtpd --version

Options:
    -f <sourcefile>    Specify the source JSON file for all configuration parameters
    -i <interface>     Specify client interface
    -c <crypto>        Literal encryptor cache
    -F <filter>        Filter regex (for ejtpd DaemonClient)
    -C <controller>    Controller interface
    -j                 Make a jack for this client
    -J                 Don't make a jack for this client
    -h --help          Show this help message
'''

import json
from ejtp.vendor.docopt import docopt

from ejtp import logging
logger_parameters = list(logging.loudlogger)
logger_parameters[0] = 'ejtpd'
logger = logging.makeLogger(*logger_parameters)

DEFAULT_INTERFACE  = ('udp4', ('localhost', 9630), 'EJTPD-DAEMON')
DEFAULT_CONTROLLER = ('udp4', ('localhost', 9631), 'EJTPD-CONTROL')

# Parsing and configuration utility functions ---------------------------------

def conf_load(filename):
    fp = None
    try:
        fp = open(filename, 'r')
    except:
        logger.warning("Couldn't load conf from path '%s'", filename)
    if fp:
        try:
            result = json.load(fp)
            logger.info("Successfully loaded conf data from '%s'", filename)
            return result
        except:
            logger.warning("Failed to parse JSON from conf file '%s'", filename)
    return {}

def conf_load_from_args(args):
    return conf_load(
         getarg(args, '-f', {}, '', '/etc/ejtpd/daemon.conf', False)
    )

def getarg(arguments, index, conf, conf_id, default, is_json=True):
    if index in arguments:
        value = arguments[index]
        if value != None:
            if is_json:
                try:
                    return json.loads(value)
                except:
                    logging.error("Couldn't parse JSON for argument %r", index)
            else:
                return value
    if conf_id in conf:
        return conf[conf_id]
    return default

# Daemon utility functions ----------------------------------------------------

def daemon_start(interface, controller, filtertext='.*', ecache=None, make_jack=True):
    from ejtp.router import Router
    from ejtp.daemon import DaemonClient
    import os
    r = Router()
    c = DaemonClient(r, interface, controller, filtertext, ecache, make_jack)
    return (r, c, os.getpid())

# CLI actions -----------------------------------------------------------------

def cli_start(args):
    conf       = conf_load_from_args(args)
    interface  = getarg(args, '-i', conf, 'dc_interface', DEFAULT_INTERFACE)
    controller = getarg(args, '-C', conf, 'controller',   DEFAULT_CONTROLLER)

    router, dc, pid = daemon_start(interface, controller)
    logger.info("Starting EJTP daemon with PID %d listening on interface %r...", pid, interface)
    logger.info("Daemon listening for commands from controller interface %r", controller)
    try:
        import time
        while True:
            time.sleep(3)
    except KeyboardInterrupt:
            logger.info("Shutting down EJTP daemon...")

if __name__ == '__main__':
    arguments = docopt(__doc__, version='ejtpd 0.9.0')
    if arguments['start']:
        cli_start(arguments)
    else:
        print(arguments)
